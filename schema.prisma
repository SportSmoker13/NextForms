// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionType {
  TEXT
  DROPDOWN
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  role          Role      @default(USER)
  forms         Form[]
  responses     Response[]
  accounts      Account[]
  image         String?
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Form {
  id          String     @id @default(cuid())
  title       String
  description String?
  published   Boolean    @default(false)
  questions   Question[]
  responses   Response[]
  creator     User       @relation(fields: [creatorId], references: [id])
  creatorId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  id          String       @id @default(cuid())
  label       String
  placeholder String?
  required    Boolean      @default(false)
  order       Int
  type        QuestionType
  options     Option[]     @relation("QuestionOptions")
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String
  answers     Answer[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Option {
  id         String   @id @default(cuid())
  value      String
  label      String
  question   Question @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Response {
  id        String   @id @default(cuid())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  answers   Answer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         String   @id @default(cuid())
  value      String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// NextAuth models (required for authentication)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}